#!/usr/bin/env ruby

# `bundle exec exe/reframe' in vendored mode
BUNDLE_MSG="try `bundle exec exe/reframe' if/when in dev mode"
OW=lambda{"#{$!}"}
def ow!() "#{$!}"; end
if ENV.key?('REFRAME_ENV')
	# http://bundler.io/rubygems.html
	begin
		Bundler.require(ENV['REFRAME_ENV'])
	rescue NameError
		raise unless ow! =~ /uninitialized constant Bundler/
		puts BUNDLE_MSG
		exit
	end
	require_relative "../lib/reframe"
else
	begin
		require "reframe"
	rescue LoadError
		raise unless ow! =~ /reframe/
		puts BUNDLE_MSG
		exit
	end
end

# C-x C-c

include Textbringer

EXEC=File.basename($0).freeze
puts "#{EXEC} #{ARGV.join(' ')}"
puts "ruby #{ RUBY_VERSION }p#{ RUBY_PATCHLEVEL }"
puts "#{EXEC} #{VERSION}"

include Commands

def load_user_config
  config_file = File.expand_path("~/.textbringer.rb")
  begin
    load(config_file)
  rescue LoadError
  end
end

$VERBOSE = nil

Controller.current = Controller.new
begin
  Window.start do
    begin
      Plugin.load_plugins
      load_user_config
      ruby_mode
      if ARGV.size > 0
        ARGV.each do |arg|
          find_file(arg)
        end
      end
      if Buffer.dumped_buffers_exist?(CONFIG[:buffer_dump_dir])
        Window.redisplay
        if yes_or_no?("Dumped buffers found; restore them?")
          buffers = Buffer.load_dumped_buffers(CONFIG[:buffer_dump_dir])
          switch_to_buffer(buffers.last)
        end
      end
    rescue Exception => e
      show_exception(e)
    end
    Window.redisplay
    begin
      trap(:CONT) { Window.redraw }
    rescue ArgumentError
    end
    begin
      loop do
        Controller.current.command_loop(TOP_LEVEL_TAG)
        Window.redisplay
      end
    rescue Exception => e
      if !e.is_a?(SystemExit)
        Buffer.dump_unsaved_buffers(CONFIG[:buffer_dump_dir])
      end
      raise
    end
  end
ensure
  Controller.current.close
end
