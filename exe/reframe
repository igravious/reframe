#!/usr/bin/env ruby

# frozen_string_literal:true

# what about when we're not using Bundler?
require 'dotenv/load'
require 'pry'
require 'preamble'
require 'active_support/core_ext/kernel/reporting'
require 'active_support/core_ext/string/inquiry'
require 'reframe' # works if bundlered or gemed

# C-x C-c
include ReFrame

EXEC = File.basename($0).freeze
puts "#{EXEC} #{ARGV.join(' ')}"
puts "ruby #{RUBY_VERSION}p#{RUBY_PATCHLEVEL}"
puts "#{EXEC} #{VERSION}"

include Commands

def load_user_config
  config_file = File.expand_path('~/.reframe.rb')
  begin
    load(config_file)
  rescue LoadError
  end
end

def debug(the_binding)
	if Window.started?
		Window.curses_shut_off
		begin
			puts "hey"
			the_binding.pry # gem install binding_of_caller
			Window.restart
		rescue
			Window.restart
			raise
		end
	else
		puts "ho"
		the_binding.pry
	end
end

$VERBOSE = nil

Controller.current = Controller.new
begin
  Window.start do
    begin
      Plugin.load_plugins
      load_user_config
      semetext_mode
      if ARGV.size.positive?
        ARGV.each do |arg|
          find_file(arg)
        end
      end
      if Buffer.dumped_buffers_exist?(CONFIG[:buffer_dump_dir])
        Window.redisplay
        if yes_or_no?('Dumped buffers found; restore them?')
          buffers = Buffer.load_dumped_buffers(CONFIG[:buffer_dump_dir])
          switch_to_buffer(buffers.last)
        end
      end
    rescue StandardError => e
      show_exception(e)
    end
    Window.redisplay
    begin
      trap(:CONT) { Window.redraw }
    rescue ArgumentError
    end
    begin
      loop do
        Controller.current.command_loop(TOP_LEVEL_TAG)
        Window.redisplay
      end
    rescue StandardError => e
      unless e.is_a?(SystemExit)
        Buffer.dump_unsaved_buffers(CONFIG[:buffer_dump_dir])
      end
      raise
    end
  end
ensure
  Controller.current.close
end
